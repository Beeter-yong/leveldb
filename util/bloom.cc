// Copyright (c) 2012 The LevelDB Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file. See the AUTHORS file for names of contributors.

#include "leveldb/filter_policy.h"

#include "leveldb/slice.h"
#include "util/hash.h"

namespace leveldb {

namespace {
static uint32_t BloomHash(const Slice& key) {
  return Hash(key.data(), key.size(), 0xbc9f1d34);
}

class BloomFilterPolicy : public FilterPolicy {
 public:
  explicit BloomFilterPolicy(int bits_per_key) : bits_per_key_(bits_per_key) {
    // We intentionally round down to reduce probing cost a little bit
    k_ = static_cast<size_t>(bits_per_key * 0.69);  // 0.69 =~ ln(2)
    if (k_ < 1) k_ = 1;
    if (k_ > 30) k_ = 30;
  }

  const char* Name() const override { return "leveldb.BuiltinBloomFilter2"; }

  void CreateFilter(const Slice* keys, int n, std::string* dst) const override {
    //1、keys: key列表；
    //2、n: key的个数；
    //3、dst: 用于存放BloomFilter的数据地址
    // Compute bloom filter size (in both bits and bytes)
    size_t bits = n * bits_per_key_;  // 布隆过滤器大小，默认 bits_per_key_=10，即位数是个数 n 的十倍

    // For small n, we can see a very high false positive rate.  Fix it
    // by enforcing a minimum bloom filter length.
    if (bits < 64) bits = 64;    // 控制最小为 64 毕竟太小了错误率会变大

    size_t bytes = (bits + 7) / 8;  // leveldb 使用 char 类型表示位数组，所以要以 char 类型大小对齐
    bits = bytes * 8;

    const size_t init_size = dst->size();
    dst->resize(init_size + bytes, 0);    // 向 dst 地址后申请空间
    dst->push_back(static_cast<char>(k_));  // 最后使用一个 char 表示过滤器个数
    char* array = &(*dst)[init_size];
    for (int i = 0; i < n; i++) {
      // Use double-hashing to generate a sequence of hash values.
      // 理论上 BoolmFilter 需要多个 hash 函数计算，但 leveldb 使用了double-hashing 方式来模拟多个哈希函数，其效果类似
      // 
      uint32_t h = BloomHash(keys[i]);                // 计算一个 hash 值
      const uint32_t delta = (h >> 17) | (h << 15);  // hash 值的高 15 位，低 17 位对调
      for (size_t j = 0; j < k_; j++) {     // 相当于 k_ 个哈希函数计算 key 值
        const uint32_t bitpos = h % bits;   // 计算存储位置；
        array[bitpos / 8] |= (1 << (bitpos % 8)); // char 型数组转换成 bit 位置存储
        h += delta;   // 累加一个增量值当作下一哈希函数计算的位置信息
      }
    }
  }

  bool KeyMayMatch(const Slice& key, const Slice& bloom_filter) const override {
    const size_t len = bloom_filter.size();
    if (len < 2) return false;    // 其数组最小是 2，别忘了数组最后要有一个 char 记录哈希函数个数 k_

    const char* array = bloom_filter.data();
    const size_t bits = (len - 1) * 8;  // 除去最后一个 K_ 所占位置就是 boolmfilter 实际存储数据大小

    // Use the encoded k so that we can read filters generated by
    // bloom filters created using different parameters.
    const size_t k = array[len - 1];  // 获取这个 boolmfilter 对每一个 key 使用了多少个哈希函数
    if (k > 30) {
      // Reserved for potentially new encodings for short bloom filters.
      // Consider it a match.
      // 目前 leveldb 设定是不超过 30 个哈希函数，这是给未来扩展预留的
      return true;
    }

    uint32_t h = BloomHash(key);  // double-hash 又来一次
    const uint32_t delta = (h >> 17) | (h << 15);  // Rotate right 17 bits
    for (size_t j = 0; j < k; j++) {
      const uint32_t bitpos = h % bits;
      if ((array[bitpos / 8] & (1 << (bitpos % 8))) == 0) return false;
      h += delta;
    }
    return true;
  }

 private:
  size_t bits_per_key_;
  size_t k_;
};
}  // namespace

const FilterPolicy* NewBloomFilterPolicy(int bits_per_key) {
  return new BloomFilterPolicy(bits_per_key);
}

}  // namespace leveldb
